<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Create Notification - Concurrent" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">D:\EclipseDirectory\SafeArrivalWorkSpace\safearrival-jmeter\apache-jmeter\lib\ext\json-20170516.jar</stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables For Ohio Dev" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="authServerUrl" elementType="Argument">
            <stringProp name="Argument.name">authServerUrl</stringProp>
            <stringProp name="Argument.value">${__P(authServerUrl,authem-devsa.testschoolmessenger.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="saApiServerUrl" elementType="Argument">
            <stringProp name="Argument.name">saApiServerUrl</stringProp>
            <stringProp name="Argument.value">${__P(saApiServerUrl,api-devsa.testschoolmessenger.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apiServerUrl" elementType="Argument">
            <stringProp name="Argument.name">apiServerUrl</stringProp>
            <stringProp name="Argument.value">${__P(apiServerUrl,api.dev.safearrival.testschoolmessenger.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="httpProtocal" elementType="Argument">
            <stringProp name="Argument.name">httpProtocal</stringProp>
            <stringProp name="Argument.value">${__P(apiServerHttpProtocal,http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocalPort" elementType="Argument">
            <stringProp name="Argument.name">protocalPort</stringProp>
            <stringProp name="Argument.value">${__P(apiServerPort,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="users" elementType="Argument">
            <stringProp name="Argument.name">users</stringProp>
            <stringProp name="Argument.value">${__P(users,30)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampupPeriod" elementType="Argument">
            <stringProp name="Argument.name">rampupPeriod</stringProp>
            <stringProp name="Argument.value">${__P(rampup,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables For Ohio Stage" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="authServerUrl" elementType="Argument">
            <stringProp name="Argument.name">authServerUrl</stringProp>
            <stringProp name="Argument.value">${__P(authServerUrl,authem-testdist.testschoolmessenger.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="saApiServerUrl" elementType="Argument">
            <stringProp name="Argument.name">saApiServerUrl</stringProp>
            <stringProp name="Argument.value">${__P(saApiServerUrl,safearrivalapi-testdist.testschoolmessenger.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apiServerUrl" elementType="Argument">
            <stringProp name="Argument.name">apiServerUrl</stringProp>
            <stringProp name="Argument.value">${__P(apiServerUrl,api.stage.safearrival.testschoolmessenger.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="httpProtocal" elementType="Argument">
            <stringProp name="Argument.name">httpProtocal</stringProp>
            <stringProp name="Argument.value">${__P(apiServerHttpProtocal,http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocalPort" elementType="Argument">
            <stringProp name="Argument.name">protocalPort</stringProp>
            <stringProp name="Argument.value">${__P(apiServerPort,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="users" elementType="Argument">
            <stringProp name="Argument.name">users</stringProp>
            <stringProp name="Argument.value">${__P(users,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampupPeriod" elementType="Argument">
            <stringProp name="Argument.name">rampupPeriod</stringProp>
            <stringProp name="Argument.value">${__P(rampup,20)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Customer Id" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">utf-8</stringProp>
        <stringProp name="filename">${__P(customerId,D:\SafeArrivalProject\safearrivail-jmeter\data\CustomerIdForOhioStage.csv)}</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames">CustomerId</stringProp>
      </CSVDataSet>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1498526964000</longProp>
        <longProp name="ThreadGroup.end_time">1498526964000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">bearer ${__P(GlobalAccessToken)}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${__P(GlobalAccessToken)}&quot; == &quot;\${AccessToken}&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step1.Get access token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="鐢ㄦ埛瀹氫箟鐨勫彉閲�" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${authServerUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/1/oauth/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic c2FmZUFycml2YWxTeXN0ZW06ZGM4ZGMxNDA4NTM0YjA2YjE0NzU0YWMwMWYwOTliZTQwNDIyZmU5Nzc3YjQyYjIxNjYwNDJmNzRjYzI0ZDVlYw==</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AccessToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.{36})&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">${__setProperty(GlobalAccessToken,${AccessToken},false)}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampupPeriod}</stringProp>
        <longProp name="ThreadGroup.start_time">1491533412000</longProp>
        <longProp name="ThreadGroup.end_time">1491533412000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,60)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Student PKey" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">60000</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">pkey</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Absence ID" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">1000</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">absenceId</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">bearer ${__P(GlobalAccessToken)}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="鐢ㄦ埛瀹氫箟鐨勫彉閲�" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${saApiServerUrl}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
          <intProp name="groupSize">0</intProp>
          <longProp name="timeoutInMs">120000</longProp>
        </SyncTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step2.Get Student Info By PKey From Communicate API" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="鐢ㄦ埛瀹氫箟鐨勫彉閲�" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pkey" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${pkey}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">pkey</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/1/safe_arrival/customers/${CustomerId}/students</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">studentId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.\d*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${studentId}&quot;!=&quot;\${studentId}&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step3.Get Student Info By ID From Communicate API" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/1/safe_arrival/customers/${CustomerId}/students/${studentId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${studentId}&quot;!=&quot;\${studentId}&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step4.Send Create Notification" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;jobsettings&quot;: {&#xd;
        &quot;emailpushwindow&quot;: &quot;300000&quot;,&#xd;
        &quot;smswindow&quot;: &quot;300000&quot;,&#xd;
        &quot;phonestartoverdelay&quot;: &quot;240000&quot;,&#xd;
        &quot;totalduration&quot;: &quot;1500000&quot;,&#xd;
        &quot;pushallowed&quot;: &quot;false&quot;&#xd;
    },&#xd;
    &quot;recipients&quot;: [&#xd;
        {&#xd;
            &quot;recipientId&quot;: ${studentId},&#xd;
            &quot;customTokens&quot;: {&#xd;
                &quot;en&quot;: {&#xd;
                    &quot;ABSENCE_STARTDATE&quot;: &quot;May 15&quot;,&#xd;
                    &quot;ABSENCE_ENDDATE&quot;: &quot;May 15&quot;,&#xd;
                    &quot;ABSENCE_TYPE&quot;: &quot;Full Day&quot;,&#xd;
                    &quot;ABSENCE_REASON&quot;: &quot;Appointment&quot;,&#xd;
                    &quot;ABSENCE_TIME&quot;: null,&#xd;
                    &quot;ABSENCE_ID&quot;: ${absenceId},&#xd;
                    &quot;MARCONI_URL&quot;: &quot;https://go.schoolmessenger.com&quot;,&#xd;
                    &quot;SCHOOL_NAME&quot;: &quot;ZH test school 01&quot;&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;defaultTokens&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/1/safe_arrival/customers/${CustomerId}/jobtemplates/3/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step5.Send Update Notificaiton" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;jobsettings&quot;: {&#xd;
        &quot;emailpushwindow&quot;: &quot;300000&quot;,&#xd;
        &quot;smswindow&quot;: &quot;300000&quot;,&#xd;
        &quot;phonestartoverdelay&quot;: &quot;240000&quot;,&#xd;
        &quot;totalduration&quot;: &quot;1500000&quot;,&#xd;
        &quot;pushallowed&quot;: &quot;false&quot;&#xd;
    },&#xd;
    &quot;recipients&quot;: [&#xd;
        {&#xd;
            &quot;recipientId&quot;: ${studentId},&#xd;
            &quot;customTokens&quot;: {&#xd;
                &quot;en&quot;: {&#xd;
                    &quot;ABSENCE_STARTDATE_ORIGINAL&quot;: &quot;May 15&quot;,&#xd;
                    &quot;ABSENCE_STARTDATE&quot;: &quot;May 15&quot;,&#xd;
                    &quot;ABSENCE_ENDDATE_ORIGINAL&quot;: &quot;May 15&quot;,&#xd;
                    &quot;ABSENCE_ENDDATE&quot;: &quot;May 15&quot;,&#xd;
                    &quot;ABSENCE_TYPE_ORIGINAL&quot;: &quot;Full Day&quot;,&#xd;
                    &quot;ABSENCE_TYPE&quot;: &quot;Leave &amp; Return&quot;,&#xd;
                    &quot;ABSENCE_REASON_ORIGINAL&quot;: &quot;Appointment&quot;,&#xd;
                    &quot;ABSENCE_REASON&quot;: &quot;Dentist Appointment&quot;,&#xd;
                    &quot;ABSENCE_TIME_ORIGINAL&quot;: null,&#xd;
                    &quot;ABSENCE_TIME&quot;: &quot;11:00 AM - 3:00 PM&quot;,&#xd;
                    &quot;ABSENCE_ID&quot;: ${absenceId},&#xd;
                    &quot;MARCONI_URL&quot;: &quot;https://go.schoolmessenger.com&quot;,&#xd;
                    &quot;SCHOOL_NAME&quot;: &quot;ZH test school 01&quot;&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;defaultTokens&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/1/safe_arrival/customers/${CustomerId}/jobtemplates/4/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step6.Send Delete Notification" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;jobsettings&quot;: {&#xd;
        &quot;emailpushwindow&quot;: &quot;300000&quot;,&#xd;
        &quot;smswindow&quot;: &quot;300000&quot;,&#xd;
        &quot;phonestartoverdelay&quot;: &quot;240000&quot;,&#xd;
        &quot;totalduration&quot;: &quot;1500000&quot;,&#xd;
        &quot;pushallowed&quot;: &quot;false&quot;&#xd;
    },&#xd;
    &quot;recipients&quot;: [&#xd;
        {&#xd;
            &quot;recipientId&quot;: ${studentId},&#xd;
            &quot;customTokens&quot;: {&#xd;
                &quot;en&quot;: {&#xd;
                    &quot;ABSENCE_STARTDATE_ORIGINAL&quot;: &quot;May 15&quot;,&#xd;
                    &quot;ABSENCE_ENDDATE_ORIGINAL&quot;: &quot;May 15&quot;,&#xd;
                    &quot;ABSENCE_TYPE_ORIGINAL&quot;: &quot;Leave &amp; Return&quot;,&#xd;
                    &quot;ABSENCE_REASON_ORIGINAL&quot;: &quot;Dentist Appointment&quot;,&#xd;
                    &quot;ABSENCE_TIME_ORIGINAL&quot;: &quot;11:00 AM - 3:00 PM&quot;,&#xd;
                    &quot;ABSENCE_ID&quot;: ${absenceId},&#xd;
                    &quot;MARCONI_URL&quot;: &quot;https://go.schoolmessenger.com&quot;,&#xd;
                    &quot;SCHOOL_NAME&quot;: &quot;ZH test school 01&quot;&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;defaultTokens&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/1/safe_arrival/customers/${CustomerId}/jobtemplates/2/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="confirm notification" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;jobsettings&quot;: {&#xd;
        &quot;emailpushwindow&quot;: &quot;300000&quot;,&#xd;
        &quot;smswindow&quot;: &quot;300000&quot;,&#xd;
        &quot;phonestartoverdelay&quot;: &quot;240000&quot;,&#xd;
        &quot;totalduration&quot;: &quot;1200000&quot;,&#xd;
        &quot;pushallowed&quot;: &quot;false&quot;&#xd;
    },&#xd;
    &quot;recipients&quot;: [&#xd;
        {&#xd;
            &quot;recipientId&quot;: ${studentId},&#xd;
            &quot;customTokens&quot;: {&#xd;
                &quot;en&quot;: {&#xd;
                    &quot;ABSENCE_STARTDATE&quot;: &quot;May 12&quot;,&#xd;
                    &quot;ABSENCE_ENDDATE&quot;: &quot;May 12&quot;,&#xd;
                    &quot;ABSENCE_TYPE&quot;: &quot;Full Day&quot;,&#xd;
                    &quot;ABSENCE_REASON&quot;: &quot;Illness&quot;,&#xd;
                    &quot;ABSENCE_TIME&quot;: null,&#xd;
                    &quot;ABSENCE_ID&quot;: ${absenceId},&#xd;
                    &quot;MARCONI_URL&quot;: &quot;https://go.schoolmessenger.com&quot;,&#xd;
                    &quot;SCHOOL_NAME&quot;: &quot;Burlington Central Elementary&quot;&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;defaultTokens&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(saApiServerUrl,safearrivalapi-testdist.testschoolmessenger.com)}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/1/safe_arrival/customers/${CustomerId}/jobtemplates/3/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${__P(xmlReportPath,D:\SafeArrivalProject\safearrivail-jmeter\log\log.xml)}</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
